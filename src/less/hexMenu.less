@import "variables";

ul.hex {
  list-style: none;
  margin: 0;
  padding: 0;
  position: relative;
  & > li {
    overflow: hidden;
    display: block;
    width: @hexSize;
    height: @hexSize;
    position: absolute;
    transform: rotate(-30deg) skewX(30deg) scaleY(@hexRatio);
    pointer-events: none;
    visibility: hidden;
    & > * {
      background-color: @hexColor;
      color: #fff;
      text-align: center;
      line-height: @hexSize * (1 / @hexRatio);
      display: block;
      height: 100%;
      transform: scaleY(1.155) skewX(-30deg) rotate(30deg) scaleX(@hexRatio);
      pointer-events: auto;
    }
    &.hexShow {
      visibility: visible;
    }
    &.noHex {
      background-color: transparent;
      height: auto;
      margin: auto;
      width: auto;
      visibility: visible;
      transform: none;
      & > * {
        transform: none;
      }
    }
    &.helperHex {
      background-color: transparent;
      pointer-events: none;
      & > * {
        background-color: transparent;
      }
      &.helperHex_2x {
        left: @hexSize * -0.5 * @hexSpacing - ((@hexSpacing - 1) * 0.5 * @hexSize);
        top: 0;
        width: @hexSize * 2 * @hexSpacing;
        height: @hexSize * 2 * @hexSpacing;
      }
      &.helperHex_3x {
        left: @hexSize * -1 * @hexSpacing - ((@hexSpacing - 1) * 0.5 * @hexSize);
        top: 0;
        width: @hexSize * 3 * @hexSpacing;
        height: @hexSize * 3 * @hexSpacing;
      }
    }
  }
  &:hover {
    & > li {
      visibility: visible;
    }
  }
}

// Hex positioning classes
.hexAnim {
  transition: background-position @hexTiming ease-in-out,
  left @hexTiming ease-in-out,
  top @hexTiming ease-in-out,
  -moz-transform @hexTiming ease-in-out,
  transform @hexTiming ease-in-out,
  opacity @hexTiming linear,
  visibility @hexTiming linear,
  z-index @hexTiming linear;
}

// Generate x & y offsets for hexes
.hexOffsetY(@y) {
  left: round(@hexSize * @hexSpacing * @hexRatio * 0.5 * @y, 1);
}

.hexOffsetX(@x) {
  top: @hexSize * @hexSpacing * .75 * @x;
}

.generateHexOffsets(-15, 15);
.generateHexOffsets(@start, @stop, @n: @start) when (@n =< @stop) {
  .hexOffsetX_@{n} {
    .hexOffsetY(@n);
  }
  .hexOffsetY_@{n} {
    .hexOffsetX(@n);
  }
  .generateHexOffsets(@start, @stop, (@n + 1));
}

// Generate hover offsets
.generateHexHoverOffsets(-15, 15);
.generateHexHoverOffsets(@start, @stop, @n: @start) when (@n =< @stop) {
  *:hover > .hexHoverOffsetX_@{n} {
    .hexOffsetY(@n);
  }
  *:hover > .hexHoverOffsetY_@{n} {
    .hexOffsetX(@n);
  }
  .generateHexHoverOffsets(@start, @stop, (@n + 1));
}

// Generate z index classes
.generateHexZ(0, 10);
.generateHexZ(@start, @stop, @n: @start) when (@n =< @stop) {
  .hexZ_@{n} {
    z-index: @n + 1000;
  }
  .generateHexZ(@start, @stop, (@n + 1));
}

// Generate animation delays
.generateDelays(0, 10);
.generateDelays(@start, @stop, @n: @start) when (@n =< @stop) {
  .hexAnim.hexDelay_@{n} {
    transition-delay: @hexTiming*@n;
  }
  .generateDelays(@start, @stop, (@n + 1));
}

// Generate hover delays
.generateHoverDelays(0, 10);
.generateHoverDelays(@start, @stop, @n: @start) when (@n =< @stop) {
  *:hover > .hexAnim.hexHoverDelay_@{n} {
    transition-delay: @hexTiming*@n;
  }
  .generateHoverDelays(@start, @stop, (@n + 1));
}